.\Datetools provide a method of manipulating and working dates and times.
.\Copyright (C) 2013-2015 Chris Caron <lead2gold@gmail.com>
.\
.\This file is part of Datetools.  Datetools is free software; you can
.\redistribute it and/or modify it under the terms of the GNU General Public
.\License as published by the Free Software Foundation; either version 2 of
.\the License, or (at your option) any later version.
.\
.\This program is distributed in the hope that it will be useful,
.\but WITHOUT ANY WARRANTY; without even the implied warranty of
.\MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\GNU General Public License for more details.
.\
.\You should have received a copy of the GNU General Public License along with
.\this program; if not, write to the Free Software Foundation, Inc.,
.\51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
.TH dateblock 1 "October 19, 2013" "" "Dateblock"

.SH NAME
dateblock \- delay until a specific time

.SH SYNOPSIS
.B dateblock
.RI [ options ]
.br

.SH DESCRIPTION
dateblock works similar to how sleep works except instead for delaying the system 'for' a specific time, we delay the system 'until' a specific time. Dateblock could be compared to a how cron works with it's crontab definitions.
.PP
A variety of syntax is accepted by this tool such as:
.B
.IP x
Value: where 'x' is represented numerically.
.B
.IP */x (or /x)
.B
Modulus:
where 'x' is represented numerically.
.B
.IP x-y (or y-x)
.B
Range:
where 'x' and 'y' are are represented numerically.
.B
.IP x,y
.B
Separator:
where 'x' and 'y' are are represented numerically.
.PP
All variations of the syntax mentioned above can be mixed if separated using
the 'comma' (Separator) operator.  ie:
.B
*/a,b,c-d,/e
is valid. However: x-y-z is not valid, nor is /x/y or /x-y. All values must be within
the range of it's time type. Thus 400-4000 would never work since no time
constraint even resides within that range.

This manual page explains the
.B dateblock
program. This program...
.PP
\fBdateblock\fP is for...

.SH OPTIONS
.B
.IP -h,	--help
display a help message
.B
.IP -t,	--test
do not block for the calculated time; instead print it to the screen and return gracefully.
.B
.IP -s,	--second=SYNTAX
specify the next second to unblock at with respect to the current time. 
The syntax can follow any of the identified patterns explained above 
(Value, Modulus, Range, and Separator). Accepted valu(es): 0 - 59.
.B
.IP -n,	--minute=SYNTAX
specify the next minute to unblock at with respect to the
current time. The syntax can follow any of the identified
patterns explained above (Value, Modulus, Range, and Separator).
Accepted valu(es): 0 - 59.
.B
.IP -o,	--hour=SYNTAX
specify the next hour to unblock at with respect to the
current time. The syntax can follow any of the identified
patterns explained above (Value, Modulus, Range, and Separator).
Accepted valu(es): 0 - 23.
.B
.IP -d,	--dom=SYNTAX
specify the next day of the month to unblock at with respect to
the current time. The syntax can follow any of the identified
patterns explained above (Value, Modulus, Range, and Separator).
Accepted valu(es): 1 - 31.
.B
.IP -m,	--month=SYNTAX
specify the next month to unblock at with respect to the
current time. The syntax can follow any of the identified
patterns explained above (Value, Modulus, Range, and Separator).
Accepted Valu(es): 1 - 12 (Jan=1,...,Dec=12)
.B
.IP -w,	--dow=SYNTAX
specify the next day of the week to unblock at with respect to
the current time. The syntax can follow any of the identified
patterns explained above (Value, Modulus, Range, and Separator).
Accepted Valu(es): 0 - 6 (Sun=0,...,Sat=6)
.B
.IP -c,	--cron=CRON_SYNTAX
specify block until time in the form of a cron string with one
addition (the second column)

.B
Format explained:
    day of week (0 - 6) (Sunday=0) -----------------------+
    month (1 - 12) ------------------------------------+  |
    day of month (1 - 31) --------------------------+  |  |
    hour (0 - 23) -------------------------------+  |  |  |
    min (0 - 59) -----------------------------+  |  |  |  |
    sec (0 - 59) ---------------------------  |  |  |  |  |
                                           |  |  |  |  |  |
                                           -  -  -  -  -  -
                                           *  *  *  *  *  *

Substitute a asterix (*) as a placeholder for arguments you
are not interested in. Asterisks are automatically placed in
strings missing all 6 arguments (separated by white space).
.B
.IP -x,	--drift=SEC
Drifting is an option that allows you to adjust the
calculated results by some additional time.  Lets say you
wanted the application to wake up on the 1st minute of each
10 min interval (1, 11, 21, 31, 41, 51). Specifying the cron
(minute) '*/1' would not work. In fact the cron of '*/1'
would unblock at every minute. You could however achieve the
previous example using a drift value of '60' (seconds) and a
cron (minute) entry of '*/10'.

Some things to consider about drifting:
 - Drifting is always calculated 'after' a specified cron.
 - You can not specify a drifting value on it's own without a cron entry to go with it.
 - A drift value is always specified in seconds.
 - You can not drift longer then the interval calculated by the cron itself. In the event this occurs, only the remainder (modulus) is kept; the rest is considered overflow and will simply be ignored.  Drifting behaves this way to prevent missing a segment of time that would have otherwise been calculated.

For example... if you specify a a cron of '*/10' (which would equate to unblocking every 10 seconds), and specified a drift of of 11 (seconds), the overflow would leave you with an actual drift of '1' (not 11).
.SH "EXIT STATUS"
.B
dateblock
exits with 0 when the time to which it should unblock is reached gracefully

.B
dateblock
exits with a non-zero value if it is interrupted before the unblock period is reached.

.SH EXAMPLE
This would block until a minute divisible by 10 was reached.  Minutes divisible by 10 are: 0,10,20,30,40 and 50.

.B
    $ dateblock -n /10

This would block until a second is divisible by 5 was reached and only on hours 3 and 4.

.B
    $ dateblock -c "/5 * 3,4 * * *"

This can also be written as such:

.B
    $ dateblock -s /10 -o 3,4

This would block until the 5 minute of every hour.

.B
    $ dateblock -c "* 5"

This can also be written like this:

.B
    $ dateblock -n 5

or...:

.B
    $ dateblock -c "* 5 * * * *"

This would block until a hour divisible by 5 was reached on the first half of the month as well as the 20th of the month) Hours divisible by 5 are: 0, 5,10,15 and 20.

.B
   $ dateblock -o /5 -d 1-14,20
.SH "COPYRIGHT"
Copyright  Â©  2013-2015  Free  Software  Foundation,  Inc.   License  GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.

This is free software: you are free to change and redistribute it.  There is NO  WARRANTY,  to  the extent permitted by law.
.SH "SEE ALSO"
\fBdatemath\fP(1)
.SH AUTHOR
Chris Caron <lead2gold@gmail.com>
